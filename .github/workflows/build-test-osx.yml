name: build-test-osx
on:
  push:
    branches:
      - main
      - osx/**
      # - dm/osx-arm64-build # branch where this change was introduced
    paths-ignore:
      - '**.md'
  workflow_call:
    inputs:
      arch:
        description: "Architecture (x86_64 or aarch64)"
        required: false
        default: "aarch64"
        type: string
      use-cache:
        default: true
        description: Use Opam Cache - uncheck the box to disable use of the opam cache, meaning a long-running but completely from-scratch build.
        required: false
        type: boolean
  workflow_dispatch:
    inputs:
      use-cache:
        default: true
        description: Use Opam Cache - uncheck the box to disable use of the opam cache, meaning a long-running but completely from-scratch build.
        required: true
        type: boolean

# concurrency:
#   group: ${{ github.workflow }}-${{ github.ref }}
#   cancel-in-progress: ${{ github.event_name == 'push' }}

jobs:

  build-core:
    strategy:
      matrix:
        ocaml_version: ["5.3.0"]
    runs-on: ${{ inputs.arch == 'x86_64' && 'macos-13' || 'macos-latest' }}
    steps:
      - uses: actions/setup-python@65d7f2d534ac1bc67fcd62888c5f4f3d2cb2b236 # ratchet:actions/setup-python@v4
        with:
          python-version: "3.11"
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # ratchet:actions/checkout@v4
        with:
          submodules: true
      - env:
          SEGMENT_DOWNLOAD_TIMEOUT_MINS: 2
        # if: ${{ inputs.use-cache == 'true' || inputs.use-cache == '' }}
        name: Set GHA cache for OPAM in ~/.opam
        uses: actions/cache@d4323d4df104b026a6aa633fdb11d772146be0bf # ratchet:actions/cache@v4
        with:
          key: ${{ runner.os }}-${{ runner.arch }}-v1-opam-${{ matrix.ocaml_version }}-${{ hashFiles('opam/*.opam') }}
          path: ~/.opam
      - name: Install dependencies
        run: ./scripts/osx-setup-for-release.sh ${{ matrix.ocaml_version }}
      - name: Compile opengrep
        run: opam exec -- make core
      - name: Test opengrep-core
        run: opam exec -- make core-test
      - name: Set DYLIB_DIR based on inputs.arch
        env:
          ARCH: ${{ inputs.arch }}
        run: |
          if [ "$ARCH" = "x86_64" ]; then
            echo "DYLIB_DIR=/usr/local" >> $GITHUB_ENV
          else
            echo "DYLIB_DIR=/opt/homebrew" >> $GITHUB_ENV
          fi
      - name: Make artifact for ./bin/opengrep-core
        run: |
          mkdir artifacts
          
          cp ./bin/opengrep-core artifacts/

          # pushd artifacts

          # install_name_tool -change \
          #   ${{ env.DYLIB_DIR }}/opt/zstd/lib/libzstd.1.dylib \
          #   @loader_path/libzstd.1.dylib \
          #   opengrep-core

          # install_name_tool -change \
          #   ${{ env.DYLIB_DIR }}/opt/gmp/lib/libgmp.10.dylib \
          #   @loader_path/libgmp.10.dylib \
          #   opengrep-core
          
          # install_name_tool -change \
          #   ${{ env.DYLIB_DIR }}/opt/libev/lib/libev.4.dylib \
          #   @loader_path/libev.4.dylib \
          #   opengrep-core

          # install_name_tool -change \
          #   ${{ env.DYLIB_DIR }}/opt/pcre2/lib/libpcre2-8.0.dylib \
          #   @loader_path/libpcre2-8.0.dylib \
          #   opengrep-core

          # install_name_tool -change \
          #   ${{ env.DYLIB_DIR }}/opt/pcre/lib/libpcre.1.dylib \
          #   @loader_path/libpcre.1.dylib \
          #   opengrep-core

          # install_name_tool -change \
          #   /Users/runner/work/opengrep/opengrep/libs/ocaml-tree-sitter-core/tree-sitter/lib/libtree-sitter.0.dylib \
          #   @loader_path/libtree-sitter.0.dylib \
          #   opengrep-core

          # install_name_tool -delete_rpath \
          #   /Users/runner/work/opengrep/opengrep/libs/ocaml-tree-sitter-core/tree-sitter/lib \
          #   opengrep-core
          
          # # otool -l opengrep-core
          # otool -L opengrep-core | grep -v "^\\s*/usr/lib/"

          # cp ${{ env.DYLIB_DIR }}/opt/zstd/lib/libzstd.1.dylib . 
          # cp ${{ env.DYLIB_DIR }}/opt/gmp/lib/libgmp.10.dylib . 
          # cp ${{ env.DYLIB_DIR }}/opt/libev/lib/libev.4.dylib . 
          # cp ${{ env.DYLIB_DIR }}/opt/pcre2/lib/libpcre2-8.0.dylib . 
          # cp ${{ env.DYLIB_DIR }}/opt/pcre/lib/libpcre.1.dylib .
          # cp /Users/runner/work/opengrep/opengrep/libs/ocaml-tree-sitter-core/tree-sitter/lib/libtree-sitter.0.dylib .

          # popd
          tar czf artifacts.tgz artifacts
      - uses: actions/upload-artifact@4cec3d8aa04e39d1a68397de0c4cd6fb9dce8ec1 # ratchet:actions/upload-artifact@v4
        with:
          name: opengrep-osx-${{ inputs.arch == 'x86_64' && 'x86' || 'arm64' }}
          path: artifacts.tgz

  build-wheels:
    needs:
      - build-core
    runs-on: ${{ inputs.arch == 'x86_64' && 'macos-13' || 'macos-latest' }}
    steps:
      - uses: actions/setup-python@65d7f2d534ac1bc67fcd62888c5f4f3d2cb2b236 # ratchet:actions/setup-python@v4
        with:
          python-version: "3.11"
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # ratchet:actions/checkout@v4
        with:
          submodules: true
      - uses: actions/download-artifact@b14cf4c92620c250e1c074ab0a5800e37df86765 # ratchet:actions/download-artifact@v4
        with:
          name: opengrep-osx-${{ inputs.arch == 'x86_64' && 'x86' || 'arm64' }}
      - name: Set PLAT_NAME based on inputs.arch
        env:
          ARCH: ${{ inputs.arch }}
        run: |
          if [ "$ARCH" = "x86_64" ]; then
            echo "PLAT_NAME=macosx_10_9_x86_64" >> $GITHUB_ENV
          else
            echo "PLAT_NAME=macosx_11_0_arm64" >> $GITHUB_ENV
          fi
      - name: Build wheels
        run: |
          tar xvfz artifacts.tgz
          cp artifacts/* cli/src/semgrep/bin

          ./scripts/build-wheels.sh --plat-name ${{ env.PLAT_NAME }}

      - uses: actions/upload-artifact@4cec3d8aa04e39d1a68397de0c4cd6fb9dce8ec1 # ratchet:actions/upload-artifact@v4
        with:
          name: osx-${{ inputs.arch == 'x86_64' && 'x86' || 'arm64' }}-wheel
          path: cli/dist.zip

  test-wheels:
    needs:
      - build-wheels
    runs-on: ${{ inputs.arch == 'x86_64' && 'macos-13' || 'macos-latest' }}
    steps:
      - uses: actions/setup-python@65d7f2d534ac1bc67fcd62888c5f4f3d2cb2b236 # ratchet:actions/setup-python@v4
        with:
          python-version: "3.11"
      - uses: actions/download-artifact@b14cf4c92620c250e1c074ab0a5800e37df86765 # ratchet:actions/download-artifact@v4
        with:
          name: osx-${{ inputs.arch == 'x86_64' && 'x86' || 'arm64' }}-wheel
      - run: unzip dist.zip
      - name: install package
        run: pip3 install dist/*.whl
      - run: opengrep --version
      - name: e2e opengrep-core test
        run: echo '1 == 1' | opengrep -l python -e '$X == $X' -
        shell: bash {0}
